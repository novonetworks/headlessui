{"version":3,"file":"headlessui.cjs.production.min.js","sources":["../src/utils/render.ts","../src/components/keyboard.ts","../src/utils/match.ts","../src/hooks/use-sync-refs.ts","../src/utils/bugs.ts","../src/hooks/use-iso-morphic-effect.ts","../src/hooks/use-server-handoff-complete.ts","../src/hooks/use-id.ts","../src/utils/focus-management.ts","../src/hooks/use-focus-trap.ts","../src/hooks/use-window-event.ts","../src/hooks/use-is-mounted.ts","../src/hooks/use-inert-others.ts","../src/internal/portal-force-root.tsx","../src/components/portal/portal.tsx","../src/components/description/description.tsx","../src/internal/open-closed.tsx","../src/internal/stack-context.tsx","../src/components/dialog/dialog.tsx","../src/components/disclosure/disclosure.tsx","../src/utils/calculate-active-index.ts","../src/components/listbox/listbox.tsx","../src/utils/disposables.ts","../src/hooks/use-disposables.ts","../src/hooks/use-computed.ts","../src/components/menu/menu.tsx","../src/hooks/use-tree-walker.ts","../src/components/popover/popover.tsx","../src/components/label/label.tsx","../src/components/radio-group/radio-group.tsx","../src/hooks/use-flags.ts","../src/components/switch/switch.tsx","../src/components/transitions/utils/transition.ts","../src/hooks/use-is-initial-render.ts","../src/utils/once.ts","../src/components/transitions/transition.tsx","../src/components/focus-trap/focus-trap.tsx"],"sourcesContent":["import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TSlot>({\n  props,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name,\n}: {\n  props: Expand<Props<TTag, TSlot, any> & PropsForFeatures<TFeature>>\n  slot?: TSlot\n  defaultTag: ElementType\n  features?: TFeature\n  visible?: boolean\n  name: string\n}) {\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, slot, defaultTag, name)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          slot,\n          defaultTag,\n          name\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, slot, defaultTag, name)\n}\n\nfunction _render<TTag extends ElementType, TSlot>(\n  props: Props<TTag, TSlot> & { ref?: unknown },\n  slot: TSlot = {} as TSlot,\n  tag: ElementType,\n  name: string\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(slot) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the slot as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(slot)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (\n        !isValidElement(resolvedChildren) ||\n        (Array.isArray(resolvedChildren) && resolvedChildren.length > 1)\n      ) {\n        throw new Error(\n          [\n            'Passing props on \"Fragment\"!',\n            '',\n            `The current component <${name} /> is rendering a \"Fragment\".`,\n            `However we need to passthrough the following props:`,\n            Object.keys(passThroughProps)\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n            '',\n            'You can apply a few solutions:',\n            [\n              'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n              'Render a single element as the child so that we can forward the props onto that element.',\n            ]\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n          ].join('\\n')\n        )\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n","// TODO: This must already exist somewhere, right? ðŸ¤”\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n","export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n","import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n","// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n","import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import { useState, useEffect } from 'react'\n\nlet state = { serverHandoffComplete: false }\n\nexport function useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = useState(state.serverHandoffComplete)\n\n  useEffect(() => {\n    if (serverHandoffComplete === true) return\n\n    setServerHandoffComplete(true)\n  }, [serverHandoffComplete])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return serverHandoffComplete\n}\n","import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n","import { match } from './match'\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nlet focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n  .map(\n    process.env.NODE_ENV === 'test'\n      ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n        // \"hidden\" can be the document.activeElement, because this is not possible\n        // in real browsers.\n        selector => `${selector}:not([tabindex='-1']):not([style*='display: none'])`\n      : selector => `${selector}:not([tabindex='-1'])`\n  )\n  .join(',')\n\nexport enum Focus {\n  /** Focus the first non-disabled element */\n  First = 1 << 0,\n\n  /** Focus the previous non-disabled element */\n  Previous = 1 << 1,\n\n  /** Focus the next non-disabled element */\n  Next = 1 << 2,\n\n  /** Focus the last non-disabled element */\n  Last = 1 << 3,\n\n  /** Wrap tab around */\n  WrapAround = 1 << 4,\n\n  /** Prevent scrolling the focusable elements into view */\n  NoScroll = 1 << 5,\n}\n\nexport enum FocusResult {\n  /** Something went wrong while trying to focus. */\n  Error,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N+1` where `N` is the last index in the array, then we overflow. */\n  Overflow,\n\n  /** Focus was successful. */\n  Success,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N-1` where `N` is the first index in the array, then we underflow. */\n  Underflow,\n}\n\nenum Direction {\n  Previous = -1,\n  Next = 1,\n}\n\nexport function getFocusableElements(container: HTMLElement | null = document.body) {\n  if (container == null) return []\n  return Array.from(container.querySelectorAll<HTMLElement>(focusableSelector))\n}\n\nexport enum FocusableMode {\n  /** The element itself must be focusable. */\n  Strict,\n\n  /** The element should be inside of a focusable element. */\n  Loose,\n}\n\nexport function isFocusableElement(\n  element: HTMLElement,\n  mode: FocusableMode = FocusableMode.Strict\n) {\n  if (element === document.body) return false\n\n  return match(mode, {\n    [FocusableMode.Strict]() {\n      return element.matches(focusableSelector)\n    },\n    [FocusableMode.Loose]() {\n      let next: HTMLElement | null = element\n\n      while (next !== null) {\n        if (next.matches(focusableSelector)) return true\n        next = next.parentElement\n      }\n\n      return false\n    },\n  })\n}\n\nexport function focusElement(element: HTMLElement | null) {\n  element?.focus({ preventScroll: true })\n}\n\nexport function focusIn(container: HTMLElement | HTMLElement[], focus: Focus) {\n  let elements = Array.isArray(container) ? container : getFocusableElements(container)\n  let active = document.activeElement as HTMLElement\n\n  let direction = (() => {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let startIndex = (() => {\n    if (focus & Focus.First) return 0\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1\n    if (focus & Focus.Last) return elements.length - 1\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let focusOptions = focus & Focus.NoScroll ? { preventScroll: true } : {}\n\n  let offset = 0\n  let total = elements.length\n  let next = undefined\n  do {\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error\n\n    let nextIdx = startIndex + offset\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow\n      if (nextIdx >= total) return FocusResult.Overflow\n    }\n\n    next = elements[nextIdx]\n\n    // Try the focus the next element, might not work if it is \"hidden\" to the user.\n    next?.focus(focusOptions)\n\n    // Try the next one in line\n    offset += direction\n  } while (next !== document.activeElement)\n\n  // This is a little weird, but let me try and explain: There are a few scenario's\n  // in chrome for example where a focused `<a>` tag does not get the default focus\n  // styles and sometimes they do. This highly depends on whether you started by\n  // clicking or by using your keyboard. When you programmatically add focus `anchor.focus()`\n  // then the active element (document.activeElement) is this anchor, which is expected.\n  // However in that case the default focus styles are not applied *unless* you\n  // also add this tabindex.\n  if (!next.hasAttribute('tabindex')) next.setAttribute('tabindex', '0')\n\n  return FocusResult.Success\n}\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        throw new Error('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useWindowEvent<TType extends keyof WindowEventMap>(\n  type: TType,\n  listener: (this: Window, ev: WindowEventMap[TType]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  let listenerRef = useRef(listener)\n  listenerRef.current = listener\n\n  useEffect(() => {\n    function handler(event: WindowEventMap[TType]) {\n      listenerRef.current.call(window, event)\n    }\n\n    window.addEventListener(type, handler, options)\n    return () => window.removeEventListener(type, handler, options)\n  }, [type, options])\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsMounted() {\n  let mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet DescriptionContext = createContext<\n  ({ register(value: string): () => void } & SharedData) | null\n>(null)\n\nfunction useDescriptionContext() {\n  let context = useContext(DescriptionContext)\n  if (context === null) {\n    let err = new Error(\n      'You used a <Description /> component, but it is not inside a relevant parent.'\n    )\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext)\n    throw err\n  }\n  return context\n}\n\ninterface DescriptionProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: DescriptionProviderProps) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: DescriptionProviderProps) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let context = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let passThroughProps = props\n  let propsWeControl = { ...context.props, id }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description',\n  })\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  KeyboardEvent as ReactKeyboardEvent,\n  MutableRefObject,\n  Ref,\n  useState,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n\n    // Handle `Escape` to close\n    onKeyDown(event: ReactKeyboardEvent) {\n      if (event.key !== Keys.Escape) return\n      if (dialogState !== DialogStates.Open) return\n      if (hasNestedDialogs) return\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open }),\n    [disclosureState]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(disclosureState, {\n          [DisclosureStates.Open]: State.Open,\n          [DisclosureStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passthroughProps,\n          slot,\n          defaultTag: DEFAULT_DISCLOSURE_TAG,\n          name: 'Disclosure',\n        })}\n      </OpenClosedProvider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(ref)\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ToggleDisclosure })\n          break\n      }\n    },\n    [dispatch]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      dispatch({ type: ActionTypes.ToggleDisclosure })\n    },\n    [dispatch, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': state.disclosureState === DisclosureStates.Open ? true : undefined,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible,\n    name: 'Disclosure.Panel',\n  })\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n","function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n","import React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useId } from '../../hooks/use-id'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useComputed } from '../../hooks/use-computed'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Props } from '../../types'\nimport { Features, forwardRefWithAs, PropsForFeatures, render } from '../../utils/render'\nimport { match } from '../../utils/match'\nimport { disposables } from '../../utils/disposables'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\n\nenum ListboxStates {\n  Open,\n  Closed,\n}\n\ntype ListboxOptionDataRef = MutableRefObject<{\n  textValue?: string\n  disabled: boolean\n  value: unknown\n}>\n\ninterface StateDefinition {\n  listboxState: ListboxStates\n  propsRef: MutableRefObject<{ value: unknown; onChange(value: unknown): void }>\n  labelRef: MutableRefObject<HTMLLabelElement | null>\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  optionsRef: MutableRefObject<HTMLUListElement | null>\n  disabled: boolean\n  options: { id: string; dataRef: ListboxOptionDataRef }[]\n  searchQuery: string\n  activeOptionIndex: number | null\n}\n\nenum ActionTypes {\n  OpenListbox,\n  CloseListbox,\n\n  SetDisabled,\n\n  GoToOption,\n  Search,\n  ClearSearch,\n\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseListbox }\n  | { type: ActionTypes.OpenListbox }\n  | { type: ActionTypes.SetDisabled; disabled: boolean }\n  | { type: ActionTypes.GoToOption; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToOption; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterOption; id: string; dataRef: ListboxOptionDataRef }\n  | { type: ActionTypes.UnregisterOption; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    return { ...state, activeOptionIndex: null, listboxState: ListboxStates.Closed }\n  },\n  [ActionTypes.OpenListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Open) return state\n    return { ...state, listboxState: ListboxStates.Open }\n  },\n  [ActionTypes.SetDisabled](state, action) {\n    if (state.disabled === action.disabled) return state\n    return { ...state, disabled: action.disabled }\n  },\n  [ActionTypes.GoToOption](state, action) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.options,\n      resolveActiveIndex: () => state.activeOptionIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) return state\n    return { ...state, searchQuery: '', activeOptionIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.options.findIndex(\n      option =>\n        !option.dataRef.current.disabled &&\n        option.dataRef.current.textValue?.startsWith(searchQuery)\n    )\n\n    if (match === -1 || match === state.activeOptionIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeOptionIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterOption]: (state, action) => ({\n    ...state,\n    options: [...state.options, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterOption]: (state, action) => {\n    let nextOptions = state.options.slice()\n    let currentActiveOption =\n      state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null\n\n    let idx = nextOptions.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextOptions.splice(idx, 1)\n\n    return {\n      ...state,\n      options: nextOptions,\n      activeOptionIndex: (() => {\n        if (idx === state.activeOptionIndex) return null\n        if (currentActiveOption === null) return null\n\n        // If we removed the option before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextOptions.indexOf(currentActiveOption)\n      })(),\n    }\n  },\n}\n\nlet ListboxContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nListboxContext.displayName = 'ListboxContext'\n\nfunction useListboxContext(component: string) {\n  let context = useContext(ListboxContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Listbox.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_LISTBOX_TAG = Fragment\ninterface ListboxRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\n\nexport function Listbox<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string>(\n  props: Props<TTag, ListboxRenderPropArg, 'value' | 'onChange'> & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let reducerBag = useReducer(stateReducer, {\n    listboxState: ListboxStates.Closed,\n    propsRef: { current: { value, onChange } },\n    labelRef: createRef(),\n    buttonRef: createRef(),\n    optionsRef: createRef(),\n    disabled,\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null,\n  } as StateDefinition)\n  let [{ listboxState, propsRef, optionsRef, buttonRef }, dispatch] = reducerBag\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = onChange\n  }, [onChange, propsRef])\n  useIsoMorphicEffect(() => dispatch({ type: ActionTypes.SetDisabled, disabled }), [disabled])\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (listboxState !== ListboxStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (optionsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseListbox })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<ListboxRenderPropArg>(\n    () => ({ open: listboxState === ListboxStates.Open, disabled }),\n    [listboxState, disabled]\n  )\n\n  return (\n    <ListboxContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(listboxState, {\n          [ListboxStates.Open]: State.Open,\n          [ListboxStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passThroughProps,\n          slot,\n          defaultTag: DEFAULT_LISTBOX_TAG,\n          name: 'Listbox',\n        })}\n      </OpenClosedProvider>\n    </ListboxContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'aria-labelledby'\n  | 'disabled'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-listbox-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n          })\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n          })\n          break\n      }\n    },\n    [dispatch, state, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (state.listboxState === ListboxStates.Open) {\n        dispatch({ type: ActionTypes.CloseListbox })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        dispatch({ type: ActionTypes.OpenListbox })\n      }\n    },\n    [dispatch, d, state]\n  )\n\n  let labelledby = useComputed(() => {\n    if (!state.labelRef.current) return undefined\n    return [state.labelRef.current.id, id].join(' ')\n  }, [state.labelRef.current, id])\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.optionsRef.current?.id,\n    'aria-expanded': state.listboxState === ListboxStates.Open ? true : undefined,\n    'aria-labelledby': labelledby,\n    disabled: state.disabled,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Listbox.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype LabelPropsWeControl = 'id' | 'ref' | 'onClick'\n\nfunction Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let [state] = useListboxContext([Listbox.name, Label.name].join('.'))\n  let id = `headlessui-listbox-label-${useId()}`\n\n  let handleClick = useCallback(() => state.buttonRef.current?.focus({ preventScroll: true }), [\n    state.buttonRef,\n  ])\n\n  let slot = useMemo<LabelRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let propsWeControl = { ref: state.labelRef, id, onClick: handleClick }\n  return render({\n    props: { ...props, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: 'Listbox.Label',\n  })\n}\n\n// ---\n\nlet DEFAULT_OPTIONS_TAG = 'ul' as const\ninterface OptionsRenderPropArg {\n  open: boolean\n}\ntype OptionsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet OptionsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Options = forwardRefWithAs(function Options<\n  TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG\n>(\n  props: Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl> &\n    PropsForFeatures<typeof OptionsRenderFeatures>,\n  ref: Ref<HTMLUListElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Options.name].join('.'))\n  let optionsRef = useSyncRefs(state.optionsRef, ref)\n\n  let id = `headlessui-listbox-options-${useId()}`\n  let d = useDisposables()\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.listboxState === ListboxStates.Open\n  })()\n\n  useIsoMorphicEffect(() => {\n    let container = state.optionsRef.current\n    if (!container) return\n    if (state.listboxState !== ListboxStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.listboxState, state.optionsRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLUListElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          if (state.activeOptionIndex !== null) {\n            let { dataRef } = state.options[state.activeOptionIndex]\n            state.propsRef.current.onChange(dataRef.current.value)\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          return d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [d, dispatch, searchDisposables, state]\n  )\n\n  let labelledby = useComputed(() => state.labelRef.current?.id ?? state.buttonRef.current?.id, [\n    state.labelRef.current,\n    state.buttonRef.current,\n  ])\n\n  let slot = useMemo<OptionsRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeOptionIndex === null ? undefined : state.options[state.activeOptionIndex]?.id,\n    'aria-labelledby': labelledby,\n    id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0,\n    ref: optionsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTIONS_TAG,\n    features: OptionsRenderFeatures,\n    visible,\n    name: 'Listbox.Options',\n  })\n})\n\n// ---\n\nlet DEFAULT_OPTION_TAG = 'li' as const\ninterface OptionRenderPropArg {\n  active: boolean\n  selected: boolean\n  disabled: boolean\n}\ntype ListboxOptionPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'aria-selected'\n  | 'onPointerLeave'\n  | 'onMouseLeave'\n  | 'onPointerMove'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in Listbox itself.\n  // But today is not that day..\n  TType = Parameters<typeof Listbox>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, ListboxOptionPropsWeControl | 'value'> & {\n    disabled?: boolean\n    value: TType\n  }\n) {\n  let { disabled = false, value, ...passthroughProps } = props\n  let [state, dispatch] = useListboxContext([Listbox.name, Option.name].join('.'))\n  let id = `headlessui-listbox-option-${useId()}`\n  let active =\n    state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false\n  let selected = state.propsRef.current.value === value\n\n  let bag = useRef<ListboxOptionDataRef['current']>({ disabled, value })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n  useIsoMorphicEffect(() => {\n    bag.current.value = value\n  }, [bag, value])\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  let select = useCallback(() => state.propsRef.current.onChange(value), [state.propsRef, value])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterOption, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterOption, id })\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!selected) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n    document.getElementById(id)?.focus?.()\n  }, [state.listboxState])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.listboxState])\n\n  let handleClick = useCallback(\n    (event: { preventDefault: Function }) => {\n      if (disabled) return event.preventDefault()\n      select()\n      dispatch({ type: ActionTypes.CloseListbox })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n    },\n    [dispatch, state.buttonRef, disabled, select]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<OptionRenderPropArg>(() => ({ active, selected, disabled }), [\n    active,\n    selected,\n    disabled,\n  ])\n  let propsWeControl = {\n    id,\n    role: 'option',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'Listbox.Option',\n  })\n}\n\n// ---\n\nListbox.Button = Button\nListbox.Label = Label\nListbox.Options = Options\nListbox.Option = Option\n","export function disposables() {\n  let disposables: Function[] = []\n\n  let api = {\n    requestAnimationFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      let raf = requestAnimationFrame(...args)\n      api.add(() => cancelAnimationFrame(raf))\n    },\n\n    nextFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      api.requestAnimationFrame(() => {\n        api.requestAnimationFrame(...args)\n      })\n    },\n\n    setTimeout(...args: Parameters<typeof setTimeout>) {\n      let timer = setTimeout(...args)\n      api.add(() => clearTimeout(timer))\n    },\n\n    add(cb: () => void) {\n      disposables.push(cb)\n    },\n\n    dispose() {\n      for (let dispose of disposables.splice(0)) {\n        dispose()\n      }\n    },\n  }\n\n  return api\n}\n","import { useState, useEffect } from 'react'\n\nimport { disposables } from '../utils/disposables'\n\nexport function useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  let [d] = useState(disposables)\n  useEffect(() => () => d.dispose(), [d])\n  return d\n}\n","import { useState, useRef } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nexport function useComputed<T>(cb: () => T, dependencies: React.DependencyList) {\n  let [value, setValue] = useState(cb)\n  let cbRef = useRef(cb)\n  useIsoMorphicEffect(() => {\n    cbRef.current = cb\n  }, [cb])\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies])\n  return value\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\nimport React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { disposables } from '../../utils/disposables'\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\n\nenum MenuStates {\n  Open,\n  Closed,\n}\n\ntype MenuItemDataRef = MutableRefObject<{ textValue?: string; disabled: boolean }>\n\ninterface StateDefinition {\n  menuState: MenuStates\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  itemsRef: MutableRefObject<HTMLDivElement | null>\n  items: { id: string; dataRef: MenuItemDataRef }[]\n  searchQuery: string\n  activeItemIndex: number | null\n}\n\nenum ActionTypes {\n  OpenMenu,\n  CloseMenu,\n\n  GoToItem,\n  Search,\n  ClearSearch,\n  RegisterItem,\n  UnregisterItem,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseMenu }\n  | { type: ActionTypes.OpenMenu }\n  | { type: ActionTypes.GoToItem; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToItem; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterItem; id: string; dataRef: MenuItemDataRef }\n  | { type: ActionTypes.UnregisterItem; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseMenu](state) {\n    if (state.menuState === MenuStates.Closed) return state\n    return { ...state, activeItemIndex: null, menuState: MenuStates.Closed }\n  },\n  [ActionTypes.OpenMenu](state) {\n    if (state.menuState === MenuStates.Open) return state\n    return { ...state, menuState: MenuStates.Open }\n  },\n  [ActionTypes.GoToItem]: (state, action) => {\n    let activeItemIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.items,\n      resolveActiveIndex: () => state.activeItemIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) return state\n    return { ...state, searchQuery: '', activeItemIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.items.findIndex(\n      item =>\n        item.dataRef.current.textValue?.startsWith(searchQuery) && !item.dataRef.current.disabled\n    )\n\n    if (match === -1 || match === state.activeItemIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeItemIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterItem]: (state, action) => ({\n    ...state,\n    items: [...state.items, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterItem]: (state, action) => {\n    let nextItems = state.items.slice()\n    let currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null\n\n    let idx = nextItems.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextItems.splice(idx, 1)\n\n    return {\n      ...state,\n      items: nextItems,\n      activeItemIndex: (() => {\n        if (idx === state.activeItemIndex) return null\n        if (currentActiveItem === null) return null\n\n        // If we removed the item before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextItems.indexOf(currentActiveItem)\n      })(),\n    }\n  },\n}\n\nlet MenuContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nMenuContext.displayName = 'MenuContext'\n\nfunction useMenuContext(component: string) {\n  let context = useContext(MenuContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Menu.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useMenuContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_MENU_TAG = Fragment\ninterface MenuRenderPropArg {\n  open: boolean\n}\n\nexport function Menu<TTag extends ElementType = typeof DEFAULT_MENU_TAG>(\n  props: Props<TTag, MenuRenderPropArg>\n) {\n  let reducerBag = useReducer(stateReducer, {\n    menuState: MenuStates.Closed,\n    buttonRef: createRef(),\n    itemsRef: createRef(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null,\n  } as StateDefinition)\n  let [{ menuState, itemsRef, buttonRef }, dispatch] = reducerBag\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (menuState !== MenuStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (itemsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseMenu })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<MenuRenderPropArg>(() => ({ open: menuState === MenuStates.Open }), [\n    menuState,\n  ])\n\n  return (\n    <MenuContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(menuState, {\n          [MenuStates.Open]: State.Open,\n          [MenuStates.Closed]: State.Closed,\n        })}\n      >\n        {render({ props, slot, defaultTag: DEFAULT_MENU_TAG, name: 'Menu' })}\n      </OpenClosedProvider>\n    </MenuContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-menu-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.First }))\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last }))\n          break\n      }\n    },\n    [dispatch, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (props.disabled) return\n      if (state.menuState === MenuStates.Open) {\n        dispatch({ type: ActionTypes.CloseMenu })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        event.stopPropagation()\n        dispatch({ type: ActionTypes.OpenMenu })\n      }\n    },\n    [dispatch, d, state, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.itemsRef.current?.id,\n    'aria-expanded': state.menuState === MenuStates.Open ? true : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Menu.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEMS_TAG = 'div' as const\ninterface ItemsRenderPropArg {\n  open: boolean\n}\ntype ItemsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet ItemsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Items = forwardRefWithAs(function Items<TTag extends ElementType = typeof DEFAULT_ITEMS_TAG>(\n  props: Props<TTag, ItemsRenderPropArg, ItemsPropsWeControl> &\n    PropsForFeatures<typeof ItemsRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Items.name].join('.'))\n  let itemsRef = useSyncRefs(state.itemsRef, ref)\n\n  let id = `headlessui-menu-items-${useId()}`\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.menuState === MenuStates.Open\n  })()\n\n  useEffect(() => {\n    let container = state.itemsRef.current\n    if (!container) return\n    if (state.menuState !== MenuStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.menuState, state.itemsRef])\n\n  useTreeWalker({\n    container: state.itemsRef.current,\n    enabled: state.menuState === MenuStates.Open,\n    accept(node) {\n      if (node.getAttribute('role') === 'menuitem') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLDivElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          if (state.activeItemIndex !== null) {\n            let { id } = state.items[state.activeItemIndex]\n            document.getElementById(id)?.click()\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [dispatch, searchDisposables, state]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let slot = useMemo<ItemsRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeItemIndex === null ? undefined : state.items[state.activeItemIndex]?.id,\n    'aria-labelledby': state.buttonRef.current?.id,\n    id,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role: 'menu',\n    tabIndex: 0,\n    ref: itemsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEMS_TAG,\n    features: ItemsRenderFeatures,\n    visible,\n    name: 'Menu.Items',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEM_TAG = Fragment\ninterface ItemRenderPropArg {\n  active: boolean\n  disabled: boolean\n}\ntype MenuItemPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'onPointerLeave'\n  | 'onPointerMove'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Item<TTag extends ElementType = typeof DEFAULT_ITEM_TAG>(\n  props: Props<TTag, ItemRenderPropArg, MenuItemPropsWeControl> & {\n    disabled?: boolean\n    onClick?: (event: { preventDefault: Function }) => void\n  }\n) {\n  let { disabled = false, onClick, ...passthroughProps } = props\n  let [state, dispatch] = useMenuContext([Menu.name, Item.name].join('.'))\n  let id = `headlessui-menu-item-${useId()}`\n  let active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false\n\n  useIsoMorphicEffect(() => {\n    if (state.menuState !== MenuStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.menuState])\n\n  let bag = useRef<MenuItemDataRef['current']>({ disabled })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterItem, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterItem, id })\n  }, [bag, id])\n\n  let handleClick = useCallback(\n    (event: MouseEvent) => {\n      if (disabled) return event.preventDefault()\n      dispatch({ type: ActionTypes.CloseMenu })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      if (onClick) return onClick(event)\n    },\n    [dispatch, state.buttonRef, disabled, onClick]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<ItemRenderPropArg>(() => ({ active, disabled }), [active, disabled])\n  let propsWeControl = {\n    id,\n    role: 'menuitem',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEM_TAG,\n    name: 'Menu.Item',\n  })\n}\n\n// ---\n\nMenu.Button = Button\nMenu.Items = Items\nMenu.Item = Item\n","import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let slot = useMemo<PopoverRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(popoverState, {\n          [PopoverStates.Open]: State.Open,\n          [PopoverStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props,\n          slot,\n          defaultTag: DEFAULT_POPOVER_TAG,\n          name: 'Popover',\n        })}\n      </OpenClosedProvider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        type: 'button',\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type: 'button',\n        'aria-expanded': state.popoverState === PopoverStates.Open ? true : undefined,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & { focus?: boolean },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet LabelContext = createContext<({ register(value: string): () => void } & SharedData) | null>(\n  null\n)\n\nfunction useLabelContext() {\n  let context = useContext(LabelContext)\n  if (context === null) {\n    let err = new Error('You used a <Label /> component, but it is not inside a relevant parent.')\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext)\n    throw err\n  }\n  return context\n}\n\ninterface LabelProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useLabels(): [string | undefined, (props: LabelProviderProps) => JSX.Element] {\n  let [labelIds, setLabelIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined.\n    labelIds.length > 0 ? labelIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function LabelProvider(props: LabelProviderProps) {\n        let register = useCallback((value: string) => {\n          setLabelIds(existing => [...existing, value])\n\n          return () =>\n            setLabelIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return <LabelContext.Provider value={contextBag}>{props.children}</LabelContext.Provider>\n      }\n    }, [setLabelIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id'\n\nexport function Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl> & {\n    passive?: boolean\n  }\n) {\n  let { passive = false, ...passThroughProps } = props\n  let context = useLabelContext()\n  let id = `headlessui-label-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let propsWeControl = { ...context.props, id }\n\n  let allProps = { ...passThroughProps, ...propsWeControl }\n  // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n  if (passive) delete allProps['onClick']\n\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: context.name || 'Label',\n  })\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n","import { useState, useCallback } from 'react'\n\nexport function useFlags(initialFlags = 0) {\n  let [flags, setFlags] = useState(initialFlags)\n\n  let addFlag = useCallback((flag: number) => setFlags(flags => flags | flag), [setFlags])\n  let hasFlag = useCallback((flag: number) => Boolean(flags & flag), [flags])\n  let removeFlag = useCallback((flag: number) => setFlags(flags => flags & ~flag), [setFlags])\n  let toggleFlag = useCallback((flag: number) => setFlags(flags => flags ^ flag), [setFlags])\n\n  return { addFlag, hasFlag, removeFlag, toggleFlag }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { Label, useLabels } from '../label/label'\nimport { Description, useDescriptions } from '../description/description'\n\ninterface StateDefinition {\n  switch: HTMLButtonElement | null\n  setSwitch(element: HTMLButtonElement): void\n  labelledby: string | undefined\n  describedby: string | undefined\n}\n\nlet GroupContext = createContext<StateDefinition | null>(null)\nGroupContext.displayName = 'GroupContext'\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: Props<TTag>) {\n  let [switchElement, setSwitchElement] = useState<HTMLButtonElement | null>(null)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let context = useMemo<StateDefinition>(\n    () => ({ switch: switchElement, setSwitch: setSwitchElement, labelledby, describedby }),\n    [switchElement, setSwitchElement, labelledby, describedby]\n  )\n\n  return (\n    <DescriptionProvider name=\"Switch.Description\">\n      <LabelProvider\n        name=\"Switch.Label\"\n        props={{\n          onClick() {\n            if (!switchElement) return\n            switchElement.click()\n            switchElement.focus({ preventScroll: true })\n          },\n        }}\n      >\n        <GroupContext.Provider value={context}>\n          {render({ props, defaultTag: DEFAULT_GROUP_TAG, name: 'Switch.Group' })}\n        </GroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nlet DEFAULT_SWITCH_TAG = 'button' as const\ninterface SwitchRenderPropArg {\n  checked: boolean\n}\ntype SwitchPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-checked'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onClick'\n  | 'onKeyUp'\n  | 'onKeyPress'\n\nexport function Switch<TTag extends ElementType = typeof DEFAULT_SWITCH_TAG>(\n  props: Props<TTag, SwitchRenderPropArg, SwitchPropsWeControl | 'checked' | 'onChange'> & {\n    checked: boolean\n    onChange(checked: boolean): void\n  }\n) {\n  let { checked, onChange, ...passThroughProps } = props\n  let id = `headlessui-switch-${useId()}`\n  let groupContext = useContext(GroupContext)\n\n  let toggle = useCallback(() => onChange(!checked), [onChange, checked])\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      toggle()\n    },\n    [toggle]\n  )\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      if (event.key !== Keys.Tab) event.preventDefault()\n      if (event.key === Keys.Space) toggle()\n    },\n    [toggle]\n  )\n\n  // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n  let handleKeyPress = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => event.preventDefault(),\n    []\n  )\n\n  let slot = useMemo<SwitchRenderPropArg>(() => ({ checked }), [checked])\n  let propsWeControl = {\n    id,\n    ref: groupContext === null ? undefined : groupContext.setSwitch,\n    role: 'switch',\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext?.labelledby,\n    'aria-describedby': groupContext?.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress,\n  }\n\n  if (passThroughProps.as === 'button') {\n    Object.assign(propsWeControl, { type: 'button' })\n  }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch',\n  })\n}\n\n// ---\n\nSwitch.Group = Group\nSwitch.Label = Label\nSwitch.Description = Description\n","import { once } from '../../../utils/once'\nimport { disposables } from '../../../utils/disposables'\n\nfunction addClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.add(...classes)\n}\n\nfunction removeClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.remove(...classes)\n}\n\nexport enum Reason {\n  Finished = 'finished',\n  Cancelled = 'cancelled',\n}\n\nfunction waitForTransition(node: HTMLElement, done: (reason: Reason) => void) {\n  let d = disposables()\n\n  if (!node) return d.dispose\n\n  // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n  let { transitionDuration, transitionDelay } = getComputedStyle(node)\n\n  let [durationMs, delaysMs] = [transitionDuration, transitionDelay].map(value => {\n    let [resolvedValue = 0] = value\n      .split(',')\n      // Remove falsy we can't work with\n      .filter(Boolean)\n      // Values are returned as `0.3s` or `75ms`\n      .map(v => (v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000))\n      .sort((a, z) => z - a)\n\n    return resolvedValue\n  })\n\n  // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n  if (durationMs !== 0) {\n    d.setTimeout(() => {\n      done(Reason.Finished)\n    }, durationMs + delaysMs)\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished)\n  }\n\n  // If we get disposed before the timeout runs we should cleanup anyway\n  d.add(() => done(Reason.Cancelled))\n\n  return d.dispose\n}\n\nexport function transition(\n  node: HTMLElement,\n  base: string[],\n  from: string[],\n  to: string[],\n  done?: (reason: Reason) => void\n) {\n  let d = disposables()\n  let _done = done !== undefined ? once(done) : () => {}\n\n  addClasses(node, ...base, ...from)\n\n  d.nextFrame(() => {\n    removeClasses(node, ...from)\n    addClasses(node, ...to)\n\n    d.add(\n      waitForTransition(node, reason => {\n        removeClasses(node, ...to, ...base)\n        return _done(reason)\n      })\n    )\n  })\n\n  // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n  d.add(() => removeClasses(node, ...base, ...from, ...to))\n\n  // When we get disposed early, than we should also call the done method but switch the reason.\n  d.add(() => _done(Reason.Cancelled))\n\n  return d.dispose\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsInitialRender() {\n  let initial = useRef(true)\n\n  useEffect(() => {\n    initial.current = false\n  }, [])\n\n  return initial.current\n}\n","export function once<T>(cb: (...args: T[]) => void) {\n  let state = { called: false }\n\n  return (...args: T[]) => {\n    if (state.called) return\n    state.called = true\n    return cb(...args)\n  }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let initial = useIsInitialRender()\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  let ready = useServerHandoffComplete()\n\n  useEffect(() => {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state, ready])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      <OpenClosedProvider\n        value={match(state, {\n          [TreeStates.Visible]: State.Open,\n          [TreeStates.Hidden]: State.Closed,\n        })}\n      >\n        {render({\n          props: { ...passthroughProps, ...propsWeControl },\n          defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition.Child',\n        })}\n      </OpenClosedProvider>\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show?: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  let usesOpenClosedState = useOpenClosed()\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  if (![true, false].includes((show as unknown) as boolean)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show: show as boolean, appear: appear || !initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render({\n          props: {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          defaultTag: Fragment,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition',\n        })}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = TransitionChild\nTransition.Root = Transition\n","import {\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nlet DEFAULT_FOCUS_TRAP_TAG = 'div' as const\n\nexport function FocusTrap<TTag extends ElementType = typeof DEFAULT_FOCUS_TRAP_TAG>(\n  props: Props<TTag> & { initialFocus?: MutableRefObject<HTMLElement | null> }\n) {\n  let container = useRef<HTMLElement | null>(null)\n  let { initialFocus, ...passthroughProps } = props\n\n  let ready = useServerHandoffComplete()\n  useFocusTrap(container, ready ? FocusTrapFeatures.All : FocusTrapFeatures.None, { initialFocus })\n\n  let propsWeControl = {\n    ref: container,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    defaultTag: DEFAULT_FOCUS_TRAP_TAG,\n    name: 'FocusTrap',\n  })\n}\n"],"names":["Features","RenderStrategy","Keys","match","value","lookup","returnValue","args","error","Error","Object","keys","map","key","join","captureStackTrace","render","props","slot","defaultTag","features","visible","name","_render","featureFlags","None","Static","isStatic","rest","unmount","Unmount","Hidden","hidden","style","display","tag","omit","as","Component","children","refName","passThroughProps","refRelatedProps","undefined","ref","resolvedChildren","className","Fragment","length","isValidElement","Array","isArray","line","cloneElement","assign","existingProps","functionsToMerge","clone","func","event","defaultPrevented","mergeEventFunctions","object","compact","createElement","forwardRefWithAs","component","forwardRef","displayName","keysToOmit","useSyncRefs","refs","cache","useRef","useEffect","current","useCallback","isDisabledReactIssue7711","element","parent","parentElement","legend","HTMLFieldSetElement","HTMLLegendElement","isParentDisabled","getAttribute","previous","previousElementSibling","isFirstLegend","useIsoMorphicEffect","window","useLayoutEffect","state","serverHandoffComplete","useServerHandoffComplete","useState","setServerHandoffComplete","id","generateId","useId","ready","setId","Focus","FocusResult","Direction","FocusableMode","focusableSelector","selector","getFocusableElements","container","document","body","from","querySelectorAll","isFocusableElement","mode","Strict","matches","Loose","next","focusElement","focus","preventScroll","focusIn","elements","active","activeElement","direction","First","Next","Previous","Last","startIndex","Math","max","indexOf","focusOptions","NoScroll","offset","total","nextIdx","WrapAround","Underflow","Overflow","hasAttribute","setAttribute","Success","useWindowEvent","type","listener","options","listenerRef","handler","call","addEventListener","removeEventListener","useIsMounted","mounted","useFocusTrap","All","initialFocus","containers","restoreElement","previousActiveElement","featuresRestoreFocus","Boolean","RestoreFocus","featuresInitialFocus","InitialFocus","contains","TabLock","Tab","preventDefault","shiftKey","FocusLock","allContainers","Set","add","size","toElement","target","HTMLElement","_container$current","stopPropagation","interactables","originals","Map","inert","restore","original","get","removeAttribute","ForcePortalRootContext","createContext","ForcePortalRoot","React","Provider","force","DEFAULT_PORTAL_TAG","Portal","passthroughProps","forceInRoot","useContext","groupTarget","PortalGroupContext","existingRoot","getElementById","root","appendChild","setTarget","usePortalTarget","removeChild","createPortal","DEFAULT_GROUP_TAG","Group","DescriptionContext","useDescriptionContext","context","err","useDescriptions","descriptionIds","setDescriptionIds","useMemo","register","existing","slice","idx","splice","contextBag","Description","propsWeControl","State","Context","useOpenClosed","OpenClosedProvider","StackMessage","DialogStates","ActionTypes","StackContext","StackProvider","onUpdate","parentUpdate","notify","Add","Remove","reducers","SetTitleId","action","titleId","DialogContext","useDialogContext","Dialog","stateReducer","DisclosureStates","DialogRenderFeatures","open","onClose","nestedDialogCount","setNestedDialogCount","usesOpenClosedState","Open","Closed","internalDialogRef","dialogRef","hasOpen","hasOwnProperty","hasOnClose","dialogState","useReducer","descriptionId","dispatch","close","setTitleId","enabled","hasNestedDialogs","hasParentDialog","FocusTrapFeatures","leaf","forEach","child","set","has","useInertOthers","_internalDialogRef$cu","overflow","documentElement","paddingRight","scrollbarWidth","innerWidth","clientWidth","observer","IntersectionObserver","entries","entry","boundingClientRect","x","y","width","height","observe","disconnect","describedby","DescriptionProvider","role","onClick","onKeyDown","Escape","message","count","Overlay","overlayRef","handleClick","currentTarget","Title","ToggleDisclosure","disclosureState","LinkPanel","linkedPanel","UnlinkPanel","SetButtonId","buttonId","SetPanelId","panelId","DisclosureContext","useDisclosureContext","Disclosure","DEFAULT_DISCLOSURE_TAG","defaultOpen","reducerBag","ListboxStates","Button","buttonRef","handleKeyDown","Space","Enter","handleKeyUp","disabled","onKeyUp","PanelRenderFeatures","Panel","panelRef","disposables","api","requestAnimationFrame","raf","cancelAnimationFrame","nextFrame","setTimeout","timer","clearTimeout","cb","push","dispose","useDisposables","d","useComputed","dependencies","setValue","cbRef","calculateActiveIndex","resolvers","items","resolveItems","currentActiveIndex","resolveActiveIndex","activeIndex","nextActiveIndex","findIndex","item","resolveDisabled","reverse","all","Specific","resolveId","Nothing","assertNever","CloseListbox","listboxState","activeOptionIndex","OpenListbox","SetDisabled","GoToOption","dataRef","searchQuery","Search","toLowerCase","option","textValue","_option$dataRef$curre","startsWith","ClearSearch","RegisterOption","UnregisterOption","nextOptions","currentActiveOption","a","ListboxContext","useListboxContext","Listbox","DEFAULT_LISTBOX_TAG","onChange","propsRef","labelRef","createRef","optionsRef","_buttonRef$current","_optionsRef$current","MenuStates","ArrowDown","ArrowUp","_state$buttonRef$curr","labelledby","_state$optionsRef$cur","OptionsRenderFeatures","Options","searchDisposables","_state$buttonRef$curr3","Home","PageUp","End","PageDown","_state$buttonRef$curr4","_state$labelRef$curre2","_state$buttonRef$curr5","_state$options$state$","tabIndex","useTreeWalker","accept","walk","acceptRef","walkRef","acceptNode","node","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode","Label","_state$buttonRef$curr2","Option","selected","bag","_document$getElementB","textContent","_document$getElementB2","select","_document$getElementB4","scrollIntoView","block","_state$buttonRef$curr6","handleFocus","handleMove","handleLeave","onFocus","onPointerMove","onMouseMove","onPointerLeave","onMouseLeave","CloseMenu","menuState","activeItemIndex","OpenMenu","GoToItem","RegisterItem","UnregisterItem","nextItems","currentActiveItem","MenuContext","useMenuContext","Menu","DEFAULT_MENU_TAG","itemsRef","_itemsRef$current","PopoverStates","_state$itemsRef$curre","ItemsRenderFeatures","Items","FILTER_REJECT","FILTER_SKIP","FILTER_ACCEPT","click","_state$items$state$ac","DEFAULT_ITEM_TAG","Item","_document$getElementB3","TogglePopover","popoverState","ClosePopover","SetButton","button","SetPanel","panel","PopoverContext","usePopoverContext","Popover","PopoverGroupContext","usePopoverGroupContext","PopoverPanelContext","registerBag","groupContext","registerPopover","isFocusWithinPopoverGroup","internalButtonRef","closeOthers","panelContext","isWithinPanel","activeElementRef","previousActiveElementRef","_state$button2","focusableElements","previousIdx","_state$button3","OverlayRenderFeatures","internalPanelRef","result","_state$button7","buttonIdx","filter","_internalPanelRef$cur","_internalPanelRef$cur2","groupRef","popovers","setPopovers","unregisterPopover","registerbag","_groupRef$current","some","popover","LabelContext","useLabelContext","useLabels","labelIds","setLabelIds","passive","allProps","OptionState","radio","RadioGroupContext","useRadioGroupContext","RadioGroup","LabelProvider","radioGroupRef","firstOption","find","containsCheckedOption","triggerChange","nextValue","nextOption","_options$find","ArrowLeft","activeOption","ArrowRight","registerOption","change","optionRef","initialFlags","flags","setFlags","addFlag","flag","hasFlag","removeFlag","toggleFlag","useFlags","Empty","radioGroupDisabled","radioGroupValue","Active","handleBlur","isDisabled","checked","onBlur","GroupContext","Reason","Switch","toggle","handleKeyPress","setSwitch","onKeyPress","useIsInitialRender","initial","addClasses","classes","classList","removeClasses","remove","transition","base","to","done","_done","called","once","getComputedStyle","transitionDuration","transitionDelay","split","v","includes","parseFloat","sort","z","durationMs","Finished","Cancelled","waitForTransition","reason","useSplitClasses","trim","switchElement","setSwitchElement","TreeStates","TransitionContext","NestingContext","hasChildren","Visible","useNesting","doneRef","transitionableChildren","unregister","childId","strategy","noop","eventNames","ensureEventHooksExist","events","TransitionChildRenderFeatures","TransitionChild","beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","setState","useTransitionContext","show","appear","useParentNesting","isTransitioning","nesting","enterClasses","enterFromClasses","enterToClasses","leaveClasses","leaveFromClasses","leaveToClasses","eventsRef","useEvents","skip","Transition","nestingBag","transitionBag","sharedProps","Child","Root"],"mappings":"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"}